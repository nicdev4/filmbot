import json
import urllib
import requests
import telebot
import ast
import datetime

token = ""
api_token = ""

bot = telebot.TeleBot(token=token)
types = telebot.types;

admins = [831107251,731335768]

search = types.InlineKeyboardMarkup()
search.add(types.InlineKeyboardButton("üîé –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞", callback_data="search"))

mainmenu = types.ReplyKeyboardMarkup(resize_keyboard=True)
mainmenu.add(types.KeyboardButton("–ü–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ –º–Ω–µ —Ñ–∏–ª—å–º"))

useractions = {}
temp = {}

genres = {
    "boevik": "–±–æ–µ–≤–∏–∫",
    "fentezi": "—Ñ—ç–Ω—Ç–µ–∑–∏",
    "fantastika": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "triller": "—Ç—Ä–∏–ª–ª–µ—Ä",
    "voennyj": "–≤–æ–µ–Ω–Ω—ã–π",
    "detektiv": "–¥–µ—Ç–µ–∫—Ç–∏–≤",
    "komediya": "–∫–æ–º–µ–¥–∏—è",
    "drama": "–¥—Ä–∞–º–∞",
    "uzhasy": "—É–∂–∞—Å—ã",
    "kriminal": "–∫—Ä–∏–º–∏–Ω–∞–ª",
    "melodrama": "–º–µ–ª–æ–¥—Ä–∞–º–∞",
    "vestern": "–≤–µ—Å—Ç–µ—Ä–Ω",
    "biografiya": "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
    "anime": "–∞–Ω–∏–º–µ",
    "detskij": "–¥–µ—Ç—Å–∫–∏–π",
    "multfilm": "–º—É–ª—å—Ç—Ñ–∏–ª—å–º",
    "film-nuar": "—Ñ–∏–ª—å–º-–Ω—É–∞—Ä",
    "dlya-vzroslyh": "–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö",
    "dokumentalnyj": "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
    "igra": "–∏–≥—Ä–∞",
    "istoriya": "–∏—Å—Ç–æ—Ä–∏—è",
    "koncert": "–∫–æ–Ω—Ü–µ—Ä—Ç",
    "korotkometrazhka": "–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞",
    "muzyka": "–º—É–∑—ã–∫–∞",
    "myuzikl": "–º—é–∑–∏–∫–ª",
    "novosti": "–Ω–æ–≤–æ—Å—Ç–∏",
    "priklyucheniya": "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
    "realnoe-tv": "—Ä–µ–∞–ª—å–Ω–æ–µ –¢–í",
    "semejnyj": "—Å–µ–º–µ–π–Ω—ã–π",
    "sport": "—Å–ø–æ—Ä—Ç",
    "tok-shou": "—Ç–æ–∫-—à–æ—É",
    "ceremoniya": "—Ü–µ—Ä–µ–º–æ–Ω–∏—è",
}

mounths = {
    1: '—è–Ω–≤–∞—Ä—è',
    2: '—Ñ–µ–≤—Ä–∞–ª—è',
    3: '–º–∞—Ä—Ç–∞',
    4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è',
    6: '–∏—é–Ω—è',
    7: '–∏—é–ª—è',
    8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è',
    10: '–æ–∫—Ç—è–±—Ä—è',
    11: '–Ω–æ—è–±—Ä—è',
    12: '–¥–µ–∫–∞–±—Ä—è'
}
def isInt(value):
    try:
        int(value)
        return True
    except:
        return False
@bot.message_handler()
def reply(message):
    id = message.chat.id
    text = str(message.text)
    if(admins.__contains__(id)):
        if(useractions.__contains__(id)):
            if(str(useractions[id]).__eq__("search")):
                raw_request = requests.get("https://api.kinopoisk.dev/movie",
                                           params={'token': api_token,
                                                   'search': str(text),
                                                   'page': 1,
                                                   'field': "name",
                                                   'limit': 25,
                                                   'sortField[]': 'votes.kp',
                                                   'sortField[]': 'premiere.world',
                                                   'sortType[]': -1,
                                                   'sortType[]': -1,
                                                   'isStrict': 'false'
                                                   }
                                           )

                print(raw_request.text)
                if raw_request.status_code == 200:
                    print(raw_request.text)
                    if (raw_request.text.__eq__('{"docs":[],"total":0,"limit":1,"page":1,"pages":1}')):
                        bot.send_message(id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=search)
                    else:
                        film_data = json.loads(raw_request.text)['docs']
                        markup = types.InlineKeyboardMarkup()
                        for film in film_data:
                            name = film['name']
                            if name == None: name = str(film['alternativeName']) + " (–∞–Ω–≥–ª.)";
                            markup.add(types.InlineKeyboardButton(str(name) + " (" + str(film['year']) + ")",
                                                                  callback_data="f:" + str(film['id'])))
                        bot.send_message(id, "–ù–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É", reply_markup=markup)
                else:
                    bot.send_message(id, "–û—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
                    for admin in admins:
                        bot.send_message(admin,
                                         "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + str(
                                             id) + ": Status code " + str(
                                             raw_request.status_code))
                useractions.pop(id)
        elif(text.__eq__("/start")):
            bot.send_message(id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FilmBot. –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∏—Å–∫–∞—Ç—å —Å–≤–µ–∂–∏–µ —Ñ–∏–ª—å–º—ã, –∞ —Ç–∞–∫–∂–µ —Å–æ–≤–µ—Ç—É–µ—Ç –≤–∞–º, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä "+str(id), reply_markup=mainmenu)
            bot.send_message(id, "–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=search)
        elif(text.__eq__("–ü–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ –º–Ω–µ —Ñ–∏–ª—å–º")):
            markup = types.InlineKeyboardMarkup(row_width=1)
            for key in genres:
                markup.row(types.InlineKeyboardButton(genres[key], callback_data="sf:"+key))
            bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", reply_markup=markup)
        else:
            bot.send_message(id, "–ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=search)
    else:
        bot.send_message(id, "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ;(\n"+str(id))

@bot.callback_query_handler(func=lambda call: True)
def query(call):
    id = call.from_user.id
    data = call.data
    if (data == "search"):
        bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç")
        useractions[id] = 'search'
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç")

    elif (str(data).startswith("t:")):
        data = data[-(len(data) - 2)::]
        raw_request = requests.get("https://api.kinopoisk.dev/movie",
                                   params={'token': api_token,
                                           'search': data,
                                           'field': 'id',
                                           'inStrict': 'true',
                                           'limit': '1'}
                                   )
        if raw_request.status_code == 200:
            if (raw_request.text.__eq__('{"docs":[],"total":0,"limit":1,"page":1,"pages":1}')):
                bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å–º ;(")
            else:
                print(raw_request.text)
                message = ""
                film_data = json.loads(raw_request.text)
                if(film_data['videos']['trailers'] != None and len(film_data['videos']['trailers']) > 0):
                    markup = types.InlineKeyboardMarkup()
                    trailers = film_data['videos']['trailers']
                    i = 0
                    for trailer in trailers:
                        if(str(trailer['site']).__eq__("youtube")):
                            print(str(trailer))
                            markup.add(types.InlineKeyboardButton(trailer['name'], url=trailer['url']))
                            i = i + 1
                            if (i >= 35):
                                break
                    if(film_data['name'] != None):
                        bot.send_message(id, "–¢—Ä–µ–π–ª–µ—Ä—ã –∫ —Ñ–∏–ª—å–º—É " + str(film_data['name']), reply_markup=markup)
                    else:
                        bot.send_message(id, "–¢—Ä–µ–π–ª–µ—Ä—ã –∫ —Ñ–∏–ª—å–º—É " + str(film_data['alternativeName'])+" (–∞–Ω–≥–ª.)", reply_markup=markup)
                else:
                    bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–π–ª–µ—Ä—ã –∫ —ç—Ç–æ–º—É —Ñ–∏–ª—å–º—É :(")
        else:
            bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º.")
    elif(str(data).startswith("f:")):
        data = data[-(len(data)-2)::]
        raw_request = requests.get("https://api.kinopoisk.dev/movie",
                                   params={'token': api_token,
                                           'search': data,
                                           'field': 'id',
                                           'inStrict': 'true',
                                           'limit': '1'}
                                   )
        if raw_request.status_code == 200:
            if (raw_request.text.__eq__('{"docs":[],"total":0,"limit":1,"page":1,"pages":1}')):
                bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å–º ;(")
            else:
                print(raw_request.text)
                message = ""
                film_data = json.loads(raw_request.text)
                if film_data['name'] == None:
                    message = message+film_data["alternativeName"] + " (–∞–Ω–≥–ª)\n";
                else:
                    message = message+film_data['name']+"\n"
                if(film_data['genres'] != None and len(film_data['genres']) > 0):
                    for genre in film_data['genres']:
                        message = message + (str(str(genre['name'])[0]).upper()+str(genre['name'][1:len(genre['name'])])) + " "
                    message = message + "\n\n"
                rating = film_data['rating']
                message = message + "üèÖ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ "+str(rating['kp'])+" | IMDB "+str(rating['imdb']) + "\n"
                votes = film_data['votes']
                message = message + "–ì–æ–ª–æ—Å–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ " + str(votes['kp']) + " | IMDB " + str(votes['imdb']) + "\n";
                if film_data['description'] != None:
                    message = message + "\n" + str(film_data['description']) + "\n"
                if film_data['movieLength'] != None:
                    message = message + "\n‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å " + str(film_data['movieLength']) + " –º–∏–Ω—É—Ç\n"

                if(film_data['premiere'] != None):
                    if(film_data['premiere'].__contains__('country')):
                        if(film_data['premiere'].__contains__('world')):
                            date = str(film_data['premiere']['world'])
                            date_array = date.split("T")[0].split("-")
                            date = str(date_array[2])+" "+str(mounths[int(date_array[1])])+" "+str(date_array[0])+" –≥–æ–¥–∞"
                            message = message+"\n\n–ü—Ä–µ–º—å–µ—Ä–∞ "+date+"\n"

                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("–ö–∏–Ω–æ–ø–æ–∏—Å–∫",
                                               url="https://www.kinopoisk.ru/film/" + str(
                                                   film_data['id'])),
                    types.InlineKeyboardButton("IMDB",
                                               url="https://www.imdb.com/title/" + str(
                                                   film_data['externalId']['imdb'])))
                raw_trailers = {}
                if(film_data['videos']['trailers'] != None) and (len(film_data['videos']['trailers']) > 0):
                    markup.add(types.InlineKeyboardButton("–¢—Ä–µ–π–ª–µ—Ä—ã, —Ç–∏–∑–µ—Ä—ã", callback_data="t:"+str(film_data['id'])))
                if (film_data['poster'] != None and film_data['poster']['url'] != None):
                    bot.send_photo(id, urllib.request.urlopen(film_data['poster']['url']).read())
                markup.add(types.InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –µ—â—ë", callback_data='search'))
                bot.send_message(id, message,
                                 reply_markup=markup)
        else:
            bot.send_message(id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º.")
    elif (str(data).startswith("sf:")):
        data = data[-(len(data) - 3)::]
        print(data)
        if(genres.__contains__(data)):
            raw_request = requests.get("https://api.kinopoisk.dev/movie",
                                       params={'token': api_token,
                                               'search': str(genres[data]),
                                               'page': 1,
                                               'field': "genres.name",
                                               'limit': 1,
                                               'sortField[]': 'votes.kp',
                                               'sortField[]': 'premiere.world',
                                               'sortType[]': -1,
                                               'sortType[]': -1,
                                               'isStrict': 'false'
                                               }
                                       )

            print(raw_request.text)
            message = ""
            film_data = json.loads(raw_request.text)
            if not film_data.__contains__('name') or film_data['name'] == None:
                message = message + film_data["alternativeName"] + " (–∞–Ω–≥–ª)\n";
            else:
                message = message + film_data['name'] + "\n"
            if (film_data['genres'] != None and len(film_data['genres']) > 0):
                for genre in film_data['genres']:
                    message = message + (
                                str(str(genre['name'])[0]).upper() + str(genre['name'][1:len(genre['name'])])) + " "
                message = message + "\n\n"
            rating = film_data['rating']
            message = message + "üèÖ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ " + str(rating['kp']) + " | IMDB " + str(rating['imdb']) + "\n"
            votes = film_data['votes']
            message = message + "–ì–æ–ª–æ—Å–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ " + str(votes['kp']) + " | IMDB " + str(votes['imdb']) + "\n";
            if film_data['description'] != None:
                message = message + "\n" + str(film_data['description']) + "\n"
            if film_data['movieLength'] != None:
                message = message + "\n‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å " + str(film_data['movieLength']) + " –º–∏–Ω—É—Ç\n"

            if (film_data['premiere'] != None):
                if (film_data['premiere'].__contains__('country')):
                    if (film_data['premiere'].__contains__('world')):
                        date = str(film_data['premiere']['world'])
                        date_array = date.split("T")[0].split("-")
                        date = str(date_array[2]) + " " + str(mounths[int(date_array[1])]) + " " + str(
                            date_array[0]) + " –≥–æ–¥–∞"
                        message = message + "\n\n–ü—Ä–µ–º—å–µ—Ä–∞ " + date + "\n"

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–ö–∏–Ω–æ–ø–æ–∏—Å–∫",
                                           url="https://www.kinopoisk.ru/film/" + str(
                                               film_data['id'])),
                types.InlineKeyboardButton("IMDB",
                                           url="https://www.imdb.com/title/" + str(
                                               film_data['externalId']['imdb'])))
            raw_trailers = {}
            if (film_data['videos']['trailers'] != None) and (len(film_data['videos']['trailers']) > 0):
                markup.add(types.InlineKeyboardButton("–¢—Ä–µ–π–ª–µ—Ä—ã, —Ç–∏–∑–µ—Ä—ã", callback_data="t:" + str(film_data['id'])))
            if (film_data['poster'] != None and film_data['poster']['url'] != None):
                bot.send_photo(id, urllib.request.urlopen(film_data['poster']['url']).read())
            markup.add(types.InlineKeyboardButton("üîé –ò—Å–∫–∞—Ç—å –µ—â—ë", callback_data='search'))
            bot.send_message(id, message,
                             reply_markup=markup)
        else:
            bot.send_message(id, "–û—à–∏–±–∫–∞. –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞.")

bot.infinity_polling()